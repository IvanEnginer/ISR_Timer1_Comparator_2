
GccApplication32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000100  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000194  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000008f7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000028  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000000b0  00000000  00000000  0000094e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000006b  00000000  00000000  000009fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000067  00000000  00000000  00000a69  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000048  00000000  00000000  00000ad0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000009a  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000049  00000000  00000000  00000bb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00000bfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6f 00 	call	0xde	; 0xde <main>
  74:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_7>:
#include <avr/interrupt.h>
int s = 0;
int m = 0;

ISR(TIMER1_COMPA_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	s++;
  8a:	80 91 62 00 	lds	r24, 0x0062
  8e:	90 91 63 00 	lds	r25, 0x0063
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	90 93 63 00 	sts	0x0063, r25
  98:	80 93 62 00 	sts	0x0062, r24
	if (s>59)
  9c:	cc 97       	sbiw	r24, 0x3c	; 60
  9e:	94 f0       	brlt	.+36     	; 0xc4 <__vector_7+0x48>
	{
		m++;
  a0:	80 91 60 00 	lds	r24, 0x0060
  a4:	90 91 61 00 	lds	r25, 0x0061
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	90 93 61 00 	sts	0x0061, r25
  ae:	80 93 60 00 	sts	0x0060, r24
		if (PINB & (1 << PB1))
  b2:	b1 9b       	sbis	0x16, 1	; 22
  b4:	02 c0       	rjmp	.+4      	; 0xba <__vector_7+0x3e>
		{
			PORTB &= ~(1 << PB1);
  b6:	c1 98       	cbi	0x18, 1	; 24
  b8:	01 c0       	rjmp	.+2      	; 0xbc <__vector_7+0x40>
		}
		else
		{
			PORTB |= (1 << PB1);
  ba:	c1 9a       	sbi	0x18, 1	; 24
		}
		s=0;
  bc:	10 92 63 00 	sts	0x0063, r1
  c0:	10 92 62 00 	sts	0x0062, r1
	}
	if (PINB & (1 << PB0))
  c4:	b0 9b       	sbis	0x16, 0	; 22
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__vector_7+0x50>
	{
		PORTB &= ~(1 << PB0);
  c8:	c0 98       	cbi	0x18, 0	; 24
  ca:	01 c0       	rjmp	.+2      	; 0xce <__vector_7+0x52>
	}
	else
	{
		PORTB |= (1 << PB0);
  cc:	c0 9a       	sbi	0x18, 0	; 24
	}
	TCNT1L = 0;
  ce:	1c bc       	out	0x2c, r1	; 44
}
  d0:	9f 91       	pop	r25
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <main>:

int main(void)
{
	DDRB = (1 << PB1)|(1 << PB0);
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;
  e2:	18 ba       	out	0x18, r1	; 24
	TCCR1A = 0x40;
  e4:	80 e4       	ldi	r24, 0x40	; 64
  e6:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = 0x05;
  e8:	85 e0       	ldi	r24, 0x05	; 5
  ea:	8e bd       	out	0x2e, r24	; 46
	OCR1AH = 0x3D;
  ec:	8d e3       	ldi	r24, 0x3D	; 61
  ee:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0x09;
  f0:	89 e0       	ldi	r24, 0x09	; 9
  f2:	8a bd       	out	0x2a, r24	; 42
	TIMSK = 0x10;
  f4:	80 e1       	ldi	r24, 0x10	; 16
  f6:	89 bf       	out	0x39, r24	; 57
	sei();
  f8:	78 94       	sei
  fa:	ff cf       	rjmp	.-2      	; 0xfa <main+0x1c>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
